
import { AttachmentBuilder, EmbedBuilder, SlashCommandBuilder } from 'discord.js';
import { CreateImageRequestSizeEnum } from 'openai';
import { Command } from '../../structures/Command';
import { openai } from '../../structures/openai.js';

export default new Command(runner());

function runner() {
    let something = new SlashCommandBuilder()
        .setName("create_image")
        .setDescription("Create image from text. See what d3fau4tbot thinks?")
        .addStringOption(Option =>
            Option
                .setName("prompt")
                .setDescription("Briefly describe your prompt here you want to create an image for")
                .setRequired(true)
        )
        .addStringOption(Option =>
            Option
              .setName("resolution")
              .setDescription("Resolution of the image, default is Medium")
              .setRequired(false)
              .setChoices(
                { name: "Max", value: "1024x1024" },
                { name: "Mid", value: "512x512" },
                { name: "Min", value: "256x256" },
              )
        ).toJSON();
    something['guildId'] = ["1053990732958023720"];
    something['run'] = async ({ interaction, client }) => {
        const text = interaction.options.get("text", true).value as string;
        let res = interaction.options.get("resolution")?.value;
        if (res == null || res == undefined) res = "512x512";
        const image = await generateImage(text, res);
        if (image == null) return interaction.editReply("Something went wrong, please try again later");
        const attachment = new AttachmentBuilder(image, { name: "Generated.png", description: "Generated image from text" });
        await interaction.editReply({
          embeds: [
            new EmbedBuilder()
              .setTitle("Generated image based on text prompt")
              .setDescription(text)
              .setColor("Random")
          ], files: [attachment]
        });
    }
    return something;
}

async function generateImage (prompt: string, resolution: CreateImageRequestSizeEnum) {
  try {
    const res = await openai.createImage({
      prompt,
      n: 1,
      size: resolution
    });
    return res.data.data[0].url;
  } catch (err) {
    console.log(err);
    return null;
  }
};